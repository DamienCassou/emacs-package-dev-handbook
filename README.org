#+TITLE: The Emacs Package Developer's Handbook
#+OPTIONS: broken-links:t
#+TAGS: Emacs
#+SETUPFILE: export/setup/theme-readtheorg-local.setup

#+BEGIN_HTML
<a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="dont-tread-on-emacs-150.png" align="right"></a>
#+END_HTML

After developing some little Emacs packages for a year or so, I began to notice how I'd forget little things that I learned, and then I'd have to go hunting for that information again.  I also noticed how there are some issues for which there doesn't seem to be a "best practice" or "Standard Operating Procedure" to refer to.

So this is intended to be a place to collect and organize information related to Emacs package development.  Built with Emacs, by Emacs package developers, for Emacs package developers.

You can read this Org file directly, or you can read the [[https://alphapapa.github.io/emacs-package-dev-handbook/][HTML version]].

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      this
:END:
  - [[#emacs-lisp][Emacs Lisp]]
   - [[#editing][Editing]]
   - [[#packaging][Packaging]]
   - [[#pattern-matching][Pattern-matching]]

* Emacs Lisp                                                          :elisp:

** Editing                                                         :editing:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Tools                                                           :tools:

**** [[https://github.com/IvanMalison/multi-line][multi-line: multi-line everything from function invocations and definitions to array and map literals in a wide variety of languages]] :formatting:

** Packaging                                                     :packaging:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Best practices                                         :best_practices:

**** Autoloads                                                 :autoloads:

***** TODO Autoloading macro-generated functions

This may actually be a bug, or at least an unanswered question.

[[https://www.reddit.com/r/emacs/comments/63u5yn/how_to_use_autoload_cookies_for_custom_defunlike/][How to use autoload cookies for custom defun-like macros? : emacs]]:

#+BEGIN_QUOTE
Say I have a macro =deffoo= that expands to some custom kind of =defun=, and I want to use an autoload cookie to autoload the result. According to the manual,

#+BEGIN_EXAMPLE
    ;;;###autoload (deffoo bar   ...)
#+END_EXAMPLE

copies the entire form to =autoloads.el=, and something like

#+BEGIN_EXAMPLE
    ;;;###autoload (autoload 'bar "this-file") (deffoo bar   ...)
#+END_EXAMPLE

should be used instead. What confuses me is [[http://stackoverflow.com/a/38805102][this StackOverflow comment]] by who appears to be Stefan Monnier, saying that Emacs /should/ expand the macro before generating the autoload, and that it's probably a bug when this does not happen.

Can anyone clear up what the intended behaviour is?
#+END_QUOTE

*** Tools                                                           :tools:

**** Package installation/management             :installation:management:

***** [[https://github.com/raxod502/straight.el][straight.el: Next-generation, purely functional package manager for the Emacs hacker]]

***** [[https://github.com/jwiegley/use-package][use-package: A use-package declaration for simplifying your .emacs]]

Developed by the current maintainer of Emacs, himself, John Wiegley.

** Pattern-matching                         :destructuring:pattern_matching:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Articles                                                     :articles:

**** [[http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/][Pattern Matching in Emacs Lisp â€“ Wilfred Hughes::Blog]] :pcase:shadchen:cl:dash:
:PROPERTIES:
:archive.is: http://archive.is/J4DqY
:END:

#+BEGIN_QUOTE
Pattern matching is invaluable in elisp. Lists are ubiquitous, and a small amount of pattern matching can often replace a ton of verbose list fiddling.

Since this is Lisp, we have lots of choices! In this post, we'll compare [[https://www.gnu.org/software/emacs/manual/cl.html][cl.el]], [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase.el]], [[https://github.com/magnars/dash.el][dash.el]], and [[https://github.com/VincentToups/shadchen-el][shadchen]], so you can choose the best fit for your project. We'll look at the most common use cases, and end with some recommendations.

For the sake of this post, we'll consider both pattern matching and destructuring, as they're closely related concepts.
#+END_QUOTE

*** Libraries                                                   :libraries:

**** [[https://github.com/magnars/dash.el][dash.el]]

Dash is a powerful library, and one of its features is powerful destructuring with its ~-let~ macro, and several others that work the same way.

**** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase]]                                                      :built_in:

~pcase~ is built-in to Emacs.  Its syntax can be confusing, but it is very powerful.

***** Articles                                                 :articles:

****** [[http://newartisans.com/2016/01/pattern-matching-with-pcase/][Emacs: Pattern Matching with pcase - Lost in Technopolis]]
:PROPERTIES:
:archive.is: http://archive.is/FAzd8
:END:

**** [[https://github.com/VincentToups/shadchen-el][shadchen-el]]

A powerful, Racket-style pattern-matching library.

* Code                                                             :noexport:
:PROPERTIES:
:TOC:      ignore
:END:

This section contains code used to add to and update this document.

** TODO Automate adding new links and summaries

*** TODO Get summary of page

*** TODO Get archive.is link for page
:PROPERTIES:
:ID:       a0e9486f-24f0-47a6-8f21-50bcc7ac2ca0
:END:

This bookmarklet should provide a way to get the URL:

#+BEGIN_SRC javascript
  javascript:void(open('https://archive.today/?run=1&url='+encodeURIComponent(document.location)))
#+END_SRC

*** TODO Insert new entry at point

Maybe use capture templates and refile?
