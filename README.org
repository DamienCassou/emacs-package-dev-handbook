#+TITLE: The Emacs Package Developer's Handbook
#+OPTIONS: broken-links:t num:nil
#+TAGS: Emacs
#+SETUPFILE: export/setup/theme-bigblow-local.setup

#+HTML: <a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="dont-tread-on-emacs-150.png" align="right"></a>

After developing some little Emacs packages for a year or so, I began to notice how I'd forget little things that I learned, and then I'd have to go hunting for that information again.  I also noticed how there are some issues for which there doesn't seem to be a "best practice" or "Standard Operating Procedure" to refer to.

So this is intended to be a place to collect and organize information related to Emacs package development.  Built with Emacs, by Emacs package developers, for Emacs package developers.

You can read this Org file directly on the [[https://github.com/alphapapa/emacs-package-dev-handbook][repository]], or you can read the [[https://alphapapa.github.io/emacs-package-dev-handbook/][HTML version]].

*Note:* The primary sections are listed at the top of the page in the horizontal bar.

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      this
:END:
  -  [[#emacs-lisp][Emacs Lisp]]
    -  [[#buffers][Buffers]]
    -  [[#checkers--linters][Checkers / linters]]
    -  [[#collections][Collections]]
    -  [[#destructuring][Destructuring]]
    -  [[#editing][Editing]]
    -  [[#general][General]]
    -  [[#highlighting--font-locking][Highlighting / font-locking]]
    -  [[#packaging][Packaging]]
    -  [[#pattern-matching][Pattern matching]]
    -  [[#refactoring][Refactoring]]
    -  [[#string-manipulation][String manipulation]]
    -  [[#testing][Testing]]
    -  [[#version-control][Version control]]
    -  [[#xml--html][XML / HTML]]
  -  [[#blogs][Blogs]]
  -  [[#people][People]]
  -  [[#contributions][Contributions]]
  -  [[#tasks][Tasks]]
  -  [[#code][Code]]
* Emacs Lisp                                                          :elisp:
:PROPERTIES:
:TOC:      1
:END:

** Buffers                                                         :buffers:

*** Libraries                                                   :libraries:
:PROPERTIES:
:ID:       523aa766-36a3-4827-a114-6babf72edc6b
:END:

**** [[https://github.com/phillord/m-buffer-el][m-buffer-el: List Oriented Buffer Operations]]
:PROPERTIES:
:ID:       6858c112-9756-43b4-a2e3-fa00a71e9367
:END:

** Checkers / linters                                     :linters:checkers:

*** TODO Flycheck-package

** Collections                                                 :collections:

*** Libraries                                                   :libraries:

**** [[https://github.com/plexus/a.el][a.el: functions for dealing with association lists and hash tables. Inspired by Clojure.]] :alists:hash_tables:

**** [[https://github.com/troyp/asoc.el][asoc.el: alist library]]                                       :alists:

**** [[https://github.com/nicferrier/emacs-kv][emacs-kv: key/value collection-type functions, for alists, hash tables and plists]] :alists:hash_tables:plists:

**** [[https://github.com/Wilfred/ht.el][ht.el: The missing hash table library]]                   :hash_tables:
:PROPERTIES:
:ID:       22b35972-c32f-467a-92ee-f8a155920756
:END:

This library provides a consistent and comprehensive set of functions for working with hash tables: they're named consistently, take a natural and consistent argument order, and cover operations that the standard Emacs functions don't.

** Destructuring                                             :destructuring:

See [[id:b699e1a1-e34c-4ce8-a5dd-41161d2a1cbf][Pattern matching]].

** Editing                                                         :editing:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Tools                                                           :tools:

**** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode: minor mode that keeps your code always indented]] :formatting:indentation:parentheses:
:PROPERTIES:
:ID:       4dc7c607-a116-4c39-b063-fe34bd20cccf
:END:

**** [[https://emacs.cafe/emacs/package/2017/08/01/beginend.html][beginend.el]] :navigation:
:PROPERTIES:
:ID:       a32ed391-8ce6-46b7-9367-8117829ce2e7
:END:

This package, by Damien Cassou and Matus Goljer, helps navigation by redefining the ~M-<~ and ~M->~ keys do, depending on the major-mode.

**** [[https://github.com/magnars/expand-region.el][expand-region.el: Increase selected region by semantic units]] :selection:region:
:PROPERTIES:
:ID:       88b496f4-8230-474e-b2ee-d8e4e8ca30d0
:END:

**** [[https://github.com/emacs-helm/helm-navi][helm-navi: Navigate file sections and language keywords using Helm]] :navigation:

**** [[https://github.com/abo-abo/lispy][lispy: short and sweet LISP editing]]    :elisp:navigation:parentheses:
:PROPERTIES:
:ID:       ca3809ba-5900-4dfd-84a1-1ceecc048296
:END:

**** [[https://github.com/IvanMalison/multi-line][multi-line: multi-line everything from function invocations and definitions to array and map literals in a wide variety of languages]] :formatting:

**** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el: Multiple cursors]]             :selection:editing:
:PROPERTIES:
:ID:       deefcbc5-0c37-4936-a820-df99ae31a401
:END:

**** [[https://github.com/Fuco1/smartparens][smartparens: Minor mode  that deals with parens pairs and tries to be smart about it]] :navigation:editing:parentheses:
:PROPERTIES:
:ID:       e806d7f3-43e9-4260-aae4-479efbd41653
:END:

** General                                                         :general:

*** Libraries                                                   :libraries:

**** [[https://www.gnu.org/software/emacs/manual/html_node/cl/index.html][Common Lisp Extensions]] (=cl-lib=)                            :built_in:

This is the built-in =cl-lib= package which implements Common Lisp functions and control structures for Emacs Lisp.

**** [[https://github.com/magnars/dash.el][dash.el]]                                                        :dash:
:PROPERTIES:
:ID:       e85e4252-ea03-4473-b52f-9393e7527fad
:END:

Dash is a powerful general-purpose library that provides many useful functions and macros.

**** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el][subr-x]]                                :built_in:strings:flow_control:

#+BEGIN_QUOTE
Less commonly used functions that complement basic APIs, often implemented in C code (like hash-tables and strings), and are not eligible for inclusion in subr.el.
#+END_QUOTE

This is a built-in package that provides several useful functions and macros, such as =thread-first= / =last=, =if-let= / =when-let=, hash-table functions, and string functions.  It's easy to forget about this, since:

#+BEGIN_QUOTE
Do not document these functions in the lispref.  http://lists.gnu.org/archive/html/emacs-devel/2014-01/msg01006.html
#+END_QUOTE


*** Tools                                                           :tools:

**** [[https://github.com/Lindydancer/el2markdown][el2markdown: Convert Emacs Lisp comments to MarkDown]]
:PROPERTIES:
:ID:       9aacf8f3-5244-4b71-8802-1c7876a9d19e
:END:

**** [[https://github.com/Lindydancer/multicolumn][multicolumn: Multiple side-by-side windows support]]
:PROPERTIES:
:ID:       267c8c25-53db-4ced-9242-176094e101e3
:END:

**** [[https://github.com/phillord/lentic][lentic: Create views of the same content in two buffers]]
:PROPERTIES:
:ID:       0c220bc9-7173-4b0f-8955-e10ab6db640f
:END:

**** [[https://github.com/Wilfred/suggest.el][suggest.el: discover elisp functions that do what you want]]
:PROPERTIES:
:ID:       57ecc064-7291-4cc5-a545-958e2bca295b
:END:
** Highlighting / font-locking                      :highlighting:font_lock:

*** Packages                                                     :packages:

Packages that do highlighting/font-locking.

**** [[https://github.com/Lindydancer/lisp-extra-font-lock][lisp-extra-font-lock: Highlight bound variables and quoted expressions in lisp]]
:PROPERTIES:
:ID:       5b4a9320-1d3d-441b-8505-7b35a8d323d3
:END:

*** Tools                                                           :tools:

Tools for developing highlighting/font-locking packages.

**** [[https://github.com/Lindydancer/face-explorer][face-explorer: Library and tools for faces and text properties]]
:PROPERTIES:
:ID:       66fef80f-0f92-4492-8199-01c24c635914
:END:

**** [[https://github.com/Lindydancer/faceup][faceup: Regression test system for font-lock keywords]]
:PROPERTIES:
:ID:       5ab6c330-15ae-455a-981c-bf298d9a2788
:END:

**** [[https://github.com/Lindydancer/font-lock-profiler][font-lock-profiler: Coverage and timing tool for font-lock keywords]]
:PROPERTIES:
:ID:       0f3ba4be-949b-4efe-8301-acf3873ab345
:END:

**** [[https://github.com/Lindydancer/font-lock-regression-suite][font-lock-regression-suite: Regression test suite for font-lock keywords of Emacs standard modes]]
:PROPERTIES:
:ID:       e54a2697-8b4a-4b65-a971-f79e0fa22120
:END:

**** [[https://github.com/Lindydancer/font-lock-studio][font-lock-studio: Debugger for Font Lock keywords]]
:PROPERTIES:
:ID:       fb9315d1-111d-4eab-8f99-00710e39b04c
:END:

**** [[https://github.com/Lindydancer/highlight-refontification][highlight-refontification: Visualize how font-lock refontifies a buffer]]
:PROPERTIES:
:ID:       85a2421d-6fbd-4c4d-a6f9-587258c8f625
:END:

** Packaging                                                     :packaging:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Best practices                                         :best_practices:

**** Autoloads                                                 :autoloads:

***** TODO Autoloading macro-generated functions

This may actually be a bug, or at least an unanswered question.

[[https://www.reddit.com/r/emacs/comments/63u5yn/how_to_use_autoload_cookies_for_custom_defunlike/][How to use autoload cookies for custom defun-like macros? : emacs]]:

#+BEGIN_QUOTE
Say I have a macro =deffoo= that expands to some custom kind of =defun=, and I want to use an autoload cookie to autoload the result. According to the manual,

#+BEGIN_EXAMPLE
    ;;;###autoload (deffoo bar   ...)
#+END_EXAMPLE

copies the entire form to =autoloads.el=, and something like

#+BEGIN_EXAMPLE
    ;;;###autoload (autoload 'bar "this-file") (deffoo bar   ...)
#+END_EXAMPLE

should be used instead. What confuses me is [[http://stackoverflow.com/a/38805102][this StackOverflow comment]] by who appears to be Stefan Monnier, saying that Emacs /should/ expand the macro before generating the autoload, and that it's probably a bug when this does not happen.

Can anyone clear up what the intended behaviour is?
#+END_QUOTE

***** Articles                                                 :articles:

****** [[https://www.lunaryorn.com/posts/autoloads-in-emacs-lisp][Autoloads in Emacs Lisp | Sebastian Wiesner]]
:PROPERTIES:
:archive.is: http://archive.is/UZHhS
:END:

**** Integration with other packages

***** Optional support

Sometimes you want your package to integrate with other packages, but you don't want to require users to install those other packages.  For example, you might want your package to work with Helm, Ivy, or the built-in Emacs =completing-read=, but you don't want to declare a dependency on and =require= Helm or Ivy, which would force users to install them to use your package.

The best way to handle this is with the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks-for-Loading.html][=with-eval-after-load=]] macro.  The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Hooks-for-Loading.html][Emacs manual]] has a page on it, and [[https://stackoverflow.com/questions/21880139/what-is-with-eval-after-load-in-emacs-lisp][this StackOverflow question]] has some more info.  You can also see an [[https://github.com/alphapapa/org-recent-headings/blob/master/org-recent-headings.el#L350][example]], which also [[https://github.com/alphapapa/org-recent-headings/blob/master/org-recent-headings.el#L377][uses]] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Declaring-Functions.html][=declare-function=]] to prevent byte-compiler errors.

**** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical binding]]                                     :lexical_binding:
:PROPERTIES:
:ID:       7247be4d-4f66-43ff-bb70-1b4a7458611b
:END:

You should always use lexical binding by setting the header in the first line of the file:

#+BEGIN_EXAMPLE
  ;;; filename.el --- File description  -*- lexical-binding: t; -*-
#+END_EXAMPLE

***** Articles                                                 :articles:

****** [[https://yoo2080.wordpress.com/2013/09/11/emacs-lisp-lexical-binding-gotchas-and-related-best-practices/][Emacs Lisp lexical binding gotchas and related best practices | Yoo Box]]
:PROPERTIES:
:archive.is: http://archive.is/0nfB4
:END:

****** [[https://emacs.stackexchange.com/questions/2129/why-is-let-faster-with-lexical-scope][elisp - Why is `let' faster with lexical scope? - Emacs Stack Exchange]]
:PROPERTIES:
:archive.is: http://archive.is/LUtfZ
:END:

Sebastian Wiesner provides a detailed explanation.

****** [[https://www.emacswiki.org/emacs/DynamicBindingVsLexicalBinding][EmacsWiki: Dynamic Binding Vs Lexical Binding]]
:PROPERTIES:
:archive.is: http://archive.is/2VtOU
:END:

A lot of good examples and discussion.

**** Skeleton
:PROPERTIES:
:ID:       aacd55b6-a56f-4064-bf0d-25173ce83ef3
:END:

Here is a skeleton you can use when starting new packages:

#+BEGIN_SRC elisp
  ;;; package-name.el --- Package description (don't include the word "Emacs")  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2017 First Last

  ;; Author: First Last <name@example.com>
  ;; URL: http://example.com/package-name.el
  ;; Version: 0.1-pre
  ;; Package-Requires: ((emacs "25.2"))
  ;; Keywords: something

  ;;; Commentary:

  ;; This is my package.  It is nice.  You should try it.

  ;;;; Installation

  ;;;;; MELPA

  ;; If you installed from MELPA, you're done.

  ;;;;; Manual

  ;; Install these required packages:

  ;; + foo
  ;; + bar

  ;; Then put this file in your load-path, and put this in your init
  ;; file:

  ;; (require 'package-name)

  ;;;; Usage

  ;; Run one of these commands:

  ;; `package-name-command': Frobnicate the flange.

  ;;;; Tips

  ;; + You can customize settings in the `package-name' group.

  ;;;; Credits

  ;; This package would not have been possible without the following
  ;; packages: foo[1], which showed me how to bifurcate, and bar[2],
  ;; which takes care of flanges.
  ;;
  ;;  [1] https://example.com/foo.el
  ;;  [2] https://example.com/bar.el

  ;;; License:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Code:

  ;;;; Requirements

  (require 'foo)
  (require 'bar)

  ;;;; Variables

  (defgroup package-name nil
    "Settings for `package-name'."
    :link '(url-link "http://example.com/package-name.el"))

  (defcustom package-name-something nil
    "This setting does something."
    :type 'something)

  (defvar package-name-map
    (let ((map (copy-keymap keymap)))
      (define-key map (kbd "key") #'package-name-command)
      map)
    "Keymap for `package-name'.")

  (defvar package-name-var nil
    "A variable.")

  ;;;; Functions

  ;;;;; Commands

  ;;;###autoload
  (defun package-name-command (args)
    "Frobnicate the flange."
    (interactive)
    (package-name--something)
    (bar))

  ;;;;; Support

  (defun package-name--something (args)
    "This function helps frobnicate the flange."
    (foo))

  ;;;; Footer

  (provide 'package-name)

  ;;; package-name.el ends here
#+END_SRC

*** Reference                                                   :reference:

**** Package headers and structure
:PROPERTIES:
:ID:       036e2a71-f392-4c9a-a524-c5354f291e2f
:END:

The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Packages.html][Emacs manual]] gives this example (I've added the lexical-binding part).  Also see [[id:aacd55b6-a56f-4064-bf0d-25173ce83ef3][Skeleton]].

#+BEGIN_EXAMPLE
  ;;; superfrobnicator.el --- Frobnicate and bifurcate flanges  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2011 Free Software Foundation, Inc.

  ;; Author: J. R. Hacker <jrh@example.com>
  ;; Version: 1.3
  ;; Package-Requires: ((flange "1.0"))
  ;; Keywords: multimedia, frobnicate
  ;; URL: http://example.com/jrhacker/superfrobnicate

  ...

  ;;; Commentary:

  ;; This package provides a minor mode to frobnicate and/or
  ;; bifurcate any flanges you desire. To activate it, just type
  ...

  ;;;###autoload
  (define-minor-mode superfrobnicator-mode
  ...
#+END_EXAMPLE

*** Tools                                                           :tools:

**** Package installation/management             :installation:management:

***** [[https://github.com/Malabarba/paradox][paradox: modernizing Emacs' Package Menu. With package ratings, usage statistics, customizability, and more.]]
:PROPERTIES:
:ID:       2c31eae6-eeba-433f-bc26-9465d5aa8537
:END:

***** [[https://github.com/raxod502/straight.el][straight.el: Next-generation, purely functional package manager for the Emacs hacker]]

***** [[https://github.com/jwiegley/use-package][use-package: A use-package declaration for simplifying your .emacs]]
:PROPERTIES:
:ID:       540617fd-d4ff-47df-89da-6c48c8f27785
:END:

Developed by the current maintainer of Emacs, himself, John Wiegley.

** Pattern matching                         :destructuring:pattern_matching:
:PROPERTIES:
:TOC:      ignore-children
:ID:       b699e1a1-e34c-4ce8-a5dd-41161d2a1cbf
:END:

*** Articles                                                     :articles:

**** [[http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/][Pattern Matching in Emacs Lisp – Wilfred Hughes::Blog]] :pcase:shadchen:cl:dash:
:PROPERTIES:
:archive.is: http://archive.is/J4DqY
:END:

#+BEGIN_QUOTE
Pattern matching is invaluable in elisp. Lists are ubiquitous, and a small amount of pattern matching can often replace a ton of verbose list fiddling.

Since this is Lisp, we have lots of choices! In this post, we'll compare [[https://www.gnu.org/software/emacs/manual/cl.html][cl.el]], [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase.el]], [[https://github.com/magnars/dash.el][dash.el]], and [[https://github.com/VincentToups/shadchen-el][shadchen]], so you can choose the best fit for your project. We'll look at the most common use cases, and end with some recommendations.

For the sake of this post, we'll consider both pattern matching and destructuring, as they're closely related concepts.
#+END_QUOTE

**** [[http://kitchingroup.cheme.cmu.edu/blog/2017/04/16/A-callable-plist-data-structure-for-Emacs/][A callable plist data structure for Emacs]]             :plists:macros:
:PROPERTIES:
:archive.is: http://archive.is/vmITX
:ID:       9391ab92-5d51-4786-a3c5-4822ec500500
:END:

John Kitchin demonstrates some [[id:a58f65dc-d4a4-4a40-a573-a66a28f3619c][macros]] that make it easy to access plist values.

*** Libraries                                                   :libraries:

**** [[https://github.com/magnars/dash.el][dash.el]] :dash:

Dash is a powerful library, and one of its features is powerful destructuring with its ~-let~ macro, and several others that work the same way.

**** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase]]                                                :built_in:pcase:

~pcase~ is built-in to Emacs.  Its syntax can be confusing, but it is very powerful.

***** Articles                                                 :articles:

****** [[https://www.emacswiki.org/emacs/PatternMatching][EmacsWiki: Pattern Matching]]                  :examples:EmacsWiki:

There are /lots/ of examples here.

****** [[http://newartisans.com/2016/01/pattern-matching-with-pcase/][Emacs: Pattern Matching with pcase - Lost in Technopolis]]
:PROPERTIES:
:archive.is: http://archive.is/FAzd8
:END:

****** Nic Ferrier, [[http://nic.ferrier.me.uk/blog/2013_03/refactoring-elisp-polymorphically][Using Polymorphism as a Lisp refactoring tool]]
:PROPERTIES:
:archive.is: http://archive.is/0Y3Md
:END:

**** [[https://github.com/VincentToups/shadchen-el][shadchen-el]]                                             :shadchen:el:

A powerful, Racket-style pattern-matching library.

*** Tools                                                           :tools:

**** let-alist                               :alists:macros:destructuring:

#+BEGIN_QUOTE
let-alist is the best thing to happen to associative lists since the invention of the cons cell. This little macro lets you easily access the contents of an alist, concisely and efficiently, without having to specify them preemptively. It comes built-in with 25.1, and is also available on GNU Elpa for older Emacsen.
#+END_QUOTE

[[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][Example]]:

#+BEGIN_SRC elisp
  (defun sx-question-list--print-info (question-data)
    "DOC"
    (let-alist question-data
      (list
       question-data
       (vector
        (int-to-string .score)
        (int-to-string .answer_count)
        .title " "
        .owner.display_name
        .last_activity_date sx-question-list-ago-string
        " " .tags))))
#+END_SRC

***** Articles                                                 :articles:

****** [[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][New on Elpa and in Emacs 25.1: let-alist · Endless Parentheses]]
:PROPERTIES:
:archive.is: http://archive.is/2wNFm
:END:

Here Artur introduces the macro and gives examples.

**** =with-dict=, =with-plist-vals=              :macros:plists:
:PROPERTIES:
:ID:       a58f65dc-d4a4-4a40-a573-a66a28f3619c
:END:

Courtesy of [[id:9391ab92-5d51-4786-a3c5-4822ec500500][John Kitchin]]:[fn:1:Copyright by John Kitchin, licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.]

#+BEGIN_SRC elisp
  (defmacro with-dict (key-vals &rest body)
    "A context-manager for a plist where each key is a callable
  function that returns the value."
    (declare (indent 1))
    (let* ((g (if (symbolp key-vals)
                  (symbol-value key-vals)
                key-vals))
           (keys (-slice g 0 nil 2)))
      `(labels ,(loop for key in keys
                      collect
                      (list key '() `(plist-get ',g ,key)))
         ,@body)))

  ;; Used as:

  (with-dict (:a 1 :b 'some-symbol :c 3)
             (:b))

  (let ((d '(:key1 1 :key2 some-other-symbol :key3 3)))
    (with-dict d
               (format "We got %s" (:key2))))
#+END_SRC

And:

#+BEGIN_SRC elisp
  (defmacro with-plist-vals (plist &rest body)
    "Bind the values of a plist to variables with the name of the keys."
    (declare (indent 1))
    `(let ,(loop for key in (-slice plist 0 nil 2)
                 for val in (-slice plist 1 nil 2)
                 collect (list (intern
                                (substring (symbol-name key) 1))
                               val))
       ,@body))

  ;; Used like:

  (with-plist-vals (:a 4 :b 6)
                   (* 2 a))
#+END_SRC

** Refactoring                                                 :refactoring:

*** Tools                                                           :tools:

**** [[https://github.com/Wilfred/emacs-refactor][emacs-refactor: language-specific refactoring]]
:PROPERTIES:
:ID:       d329f03e-ed1e-4205-a232-6eee16717795
:END:

** String manipulation                                             :strings:

*** Libraries                                                   :libraries:

**** [[https://github.com/magnars/s.el][s.el: The long lost Emacs string manipulation library]]

** Testing                                                         :testing:

*** Libraries                                                   :libraries:

**** [[https://github.com/phillord/assess][assess: Test support functions]]

**** [[https://github.com/jorgenschaefer/emacs-buttercup][buttercup: Behavior-Driven Emacs Lisp Testing]]
:PROPERTIES:
:ID:       108f5eb6-7307-4d4b-aaf1-dd2a8bb65a58
:END:

**** [[https://github.com/ecukes/ecukes][ecukes: Cucumber for Emacs]]

**** [[https://www.gnu.org/software/emacs/manual/html_node/ert/][Emacs Lisp Regression Testing]] (ERT)                        :built_in:

This is the standard, built-in Emacs testing library, used by core code and third-party packages alike.

*** Tools                                                    :tools:

**** bench macro                                                  :macros:

From Phil Lord's [[http://phillord.github.io/m-buffer-el/#sec-5-1-2][m-buffer-el]]:

#+BEGIN_SRC elisp
  (defmacro bench (&rest body)
    (declare (indent defun))
    `(format "%e"
             (car
              (benchmark-run-compiled
                  1000000
                (progn
                  ,@body)))))

  ;; Use like this:
  (bench
    (current-buffer)
    (point))
#+END_SRC

**** elp-profile macro                                            :macros:

Call this macro from an Org source block and you'll get a results block showing which 20 functions were called the most times, how long they took to run, etc.  Set =prefixes= to a list of strings matching the prefixes of the functions you want to instrument.

#+BEGIN_SRC elisp
  (defmacro elp-profile (times &rest body)
    (declare (indent defun))
    `(let ((prefixes '("string-" "s-" "buffer-" "append" "delq" "map"
                       "list" "car" "save-" "outline-" "delete-dups"
                       "sort" "line-" "nth" "concat" "char-to-string"
                       "rx-" "goto-" "when" "search-" "re-"))
           output)
       (dolist (prefix prefixes)
         (elp-instrument-package prefix))
       (dotimes (x ,times)
         ,@body)
       (elp-results)
       (elp-restore-all)
       (point-min)
       (forward-line 20)
       (delete-region (point) (point-max))
       (setq output (buffer-substring-no-properties (point-min) (point-max)))
       (kill-buffer)
       (delete-window)
       (let ((rows (s-lines output)))
         (append (list (list "Function" "Times called" "Total time" "Average time")
                       'hline)
                 (cl-loop for row in rows
                          collect (s-split (rx (1+ space)) row 'omit-nulls))))))

  ;; Use like this:
  (elp-profile 10
    (goto-char (point-min))
    (search-forward "something"))
#+END_SRC

** Version control                                         :version_control:

*** Packages                                                     :packages:

**** [[https://github.com/magit/magit][Magit]]                                                           :git:
:PROPERTIES:
:ID:       43daf455-caeb-4399-b1bb-15a10603018b
:END:

One of the "killer apps" for Emacs--and for git!

** XML / HTML                                                     :xml:html:

*** Libraries                                                   :libraries:

**** [[https://github.com/tali713/esxml][esxml: An elisp library for working with xml, esxml and sxml]]

Probably the most featureful, usable library at the moment.

#+BEGIN_QUOTE
This library provides to formats for xml code generation. The primary form is esxml. esxml is the form that is returned by such functions as libxml-parse-xml-region and is used internally by emacs in many xml related libraries.
#+END_QUOTE

It also provides =esxml-query=:

#+BEGIN_SRC elisp
  ;; Traditionally people pick one of the following options when faced
  ;; with the task of extracting data from XML in Emacs Lisp:
  ;;
  ;; - Using regular expressions on the unparsed document
  ;; - Manual tree traversal with `assoc', `car' and `cdr'
  ;;
  ;; Browsers faced a similar problem until jQuery happened, shortly
  ;; afterwards they started providing the `node.querySelector' and
  ;; `node.querySelectorAll' API for retrieving one or all nodes
  ;; matching a given CSS selector. This code implements the same API
  ;; with the `esxml-query' and `esxml-query-all' functions. The
  ;; following table summarizes the currently supported modifiers and
  ;; combinators:
  ;;
  ;; | Name                               | Supported? | Syntax      | 
  ;; |------------------------------------+------------+-------------|
  ;; | Namespaces                         | No         | foo|bar     | 
  ;; | Commas                             | Yes        | foo, bar    | 
  ;; | Descendant combinator              | Yes        | foo bar     | 
  ;; | Child combinator                   | Yes        | foo>bar     | 
  ;; | Adjacent sibling combinator        | No         | foo+bar     | 
  ;; | General sibling combinator         | No         | foo~bar     | 
  ;; | Universal selector                 | Yes        | *           | 
  ;; | Type selector                      | Yes        | tag         | 
  ;; | ID selector                        | Yes        | #foo        | 
  ;; | Class selector                     | Yes        | .foo        | 
  ;; | Attribute selector                 | Yes        | [foo]       | 
  ;; | Exact match attribute selector     | Yes        | [foo=bar]   | 
  ;; | Prefix match attribute selector    | Yes        | [foo^=bar]  | 
  ;; | Suffix match attribute selector    | Yes        | [foo$=bar]  | 
  ;; | Substring match attribute selector | Yes        | [foo*=bar]  | 
  ;; | Include match attribute selector   | Yes        | [foo~=bar]  | 
  ;; | Dash match attribute selector      | Yes        | [foo|=bar]  | 
  ;; | Attribute selector modifiers       | No         | [foo=bar i] | 
  ;; | Pseudo elements                    | No         | ::foo       | 
  ;; | Pseudo classes                     | No         | :foo        | 
#+END_SRC

Example:

#+BEGIN_SRC elisp
  (defun org-books--amazon (url)
    "Return plist of data for book at Amazon URL."
    (cl-flet ((field (target-field list)
                     (cl-loop for li in list
                              for (field value) = (ignore-errors
                                                    (-let (((_ _ (_ _ field) value) li))
                                                      (list field value)))
                              when (equal field target-field)
                              return (s-trim value))))
      (let* ((html (org-web-tools--get-url url))
             (tree (with-temp-buffer
                     (insert html)
                     (libxml-parse-html-region (point-min) (point-max))))
             (author (esxml-query "span.author a.contributorNameID *" tree))
             (title (esxml-query "div#booksTitle h1#title > span *" tree))
             (details (esxml-query-all "table#productDetailsTable ul li" tree))
             (date (if-let ((printed (third (esxml-query-all "div#booksTitle h1#title span *" tree))))
                       ;; Printed book
                       (s-replace "– " "" printed)
                     ;; Kindle book
                     (field "Publication Date:" details)))
             (asin (field "ASIN:" details))
             (publisher (-some->> (field "Publisher:" details)
                                  (replace-regexp-in-string (rx " (" (1+ anything) ")") "")))
             (isbn-10 (field "ISBN-10:" details))
             (isbn-13 (field "ISBN-13:" details)))
        (list :author author :title title :publisher publisher :date date
              :asin asin :isbn-10 isbn-10 :isbn-13 isbn-13))))
#+END_SRC

**** [[https://github.com/AdamNiederer/elquery][elquery: Read and manipulate HTML]]

#+BEGIN_QUOTE
It’s like jQuery, but way less useful.
#+END_QUOTE

Example:

#+BEGIN_SRC html
  <html style="height: 100vh">
    <head class="kek"><title class="kek" data-bar="foo">Complex HTML Page</title></head>
    <body class="kek bur" style="height: 100%">
      <h1 id="bar" class="kek wow">Wow this is an example</h1>
      <input id="quux" class="kek foo"/>
      <iframe id="baz" sandbox="allow-same-origin allow-scripts allow-popups allow-forms"
              width="100%" height="100%" src="example.org">
      </iframe>
    </body>
  </html>
#+END_SRC

#+BEGIN_SRC elisp
  (let ((html (elq-read-file "~/kek.html")))
    (elq-el (car (elq-$ ".kek#quux" html))) ; => "input"
    (mapcar 'elq-el (elq-$ ".kek" html)) ; => ("input" "h1" "body" "title" "head")
    (mapcar (lambda (el) (elq-el (elq-parent el)))
            (elq-$ ".kek" html)) ; => ("body" "body" "html" "head" "html")
    (mapcar (lambda (el) (mapcar 'elq-el (elq-siblings el)))
            (elq-$ ".kek" html)) ; => (("h1" "input" "iframe") ("h1" "input" "iframe") ("head" "body") ("title") ("head" "body"))
    (elq-$ ".kek" html) ; => Hope you didn't like your messages buffer
    (elq-write html nil)) ; => "<html style=\"height: 100vh\"> ... </html>"
#+END_SRC

**** [[https://github.com/skeeto/elfeed/blob/master/xml-query.el][elfeed/xml-query.el]]

Provides lisp-based (rather than string-based) selectors.  This library is primarily aimed at internal =elfeed= use rather than general use, however it may be useful to others.  The author is [[https://github.com/skeeto/elfeed/issues/189][considering]] publishing it separately.

#+BEGIN_SRC elisp
  ;; This query grabs the top-level paragraph content from XHTML.

  ;; (xml-query-all '(html body p *) xhtml)

  ;; This query extracts all the links from an Atom feed.

  ;; (xml-query-all '(feed entry link [rel "alternate"] :href) xml)
#+END_SRC

**** [[https://github.com/zweifisch/enlive][enlive: query html document with css selectors]]

This provides a limited set of lisp-based selectors (rather than string-based selectors).

Example:

#+BEGIN_SRC elisp
  (require 'enlive)

  (enlive-text
   (enlive-query (enlive-fetch "http://gnu.org/") [title])) ; => "The GNU Operating System and the Free Software Movement"
#+END_SRC

**** [[https://github.com/bddean/xml-plus][xml-plus: XML/HTML utilities]]

Mostly undocumented, providing three main functions:

#+BEGIN_SRC elisp
  ;; Utility functions for xml parse trees.
  ;; - `xml+-query-all' and `xml+-query-first' are query functions that search
  ;; descendants in node lists. They don't work with namespace-aware parsing yet
  ;;
  ;; - `xml+-node-text' gets node text
#+END_SRC
* Blogs                                                               :blogs:
:PROPERTIES:
:TOC:      0
:END:

** [[http://planet.emacsen.org/][Planet Emacsen]]

This is the main community aggregator.  You can find just about everyone's Emacs-related blog posts here.

** Sacha Chua's [[http://sachachua.com/blog/category/geek/emacs/emacs-news/][/Emacs News/]]

This is Sacha's weekly Emacs news digest.  Don't miss it!

** [[id:53c0b780-7d67-47a5-ad30-090526e2018f][Artur Malabarba's /Endless Parentheses/]]

** [[http://irreal.org/blog/][Irreal]]

One of the top Emacs blogs, frequently updated, and often highlights other interesting blog entries in the community.

** [[id:a8a8dd9f-4113-4d4c-9882-ac59a4e86c0e][Oleh Krehel]]'s [[https://oremacs.com][/(or emacs/]]
:PROPERTIES:
:ID:       b6e88f95-8c4f-4d18-a7df-de0820d76291
:END:
** [[id:12c7b803-9af2-4010-bca4-06304fbb69c7][Sacha Chua's /Living an Awesome Life/]]

* People                                                             :people:
:PROPERTIES:
:TOC: ignore-children
:END:

The Emacs community is so full of brilliant, generous people that I can't keep track of them all!  I will surely overlook many, and I will add them in no particular order, but merely as I come across them again and again.

** Anders Lindgren

Anders, aka Lindydancer, has written numerous packages to help with developing highlighting and font-lock packages, as well as some other useful tools.

+ [[https://github.com/Lindydancer][GitHub]]

*** Packages

**** [[id:9aacf8f3-5244-4b71-8802-1c7876a9d19e][el2markdown: Convert Emacs Lisp comments to MarkDown]]

**** [[id:66fef80f-0f92-4492-8199-01c24c635914][face-explorer: Library and tools for faces and text properties]]

**** [[id:5ab6c330-15ae-455a-981c-bf298d9a2788][faceup: Regression test system for font-lock keywords]]

**** [[id:0f3ba4be-949b-4efe-8301-acf3873ab345][font-lock-profiler: Coverage and timing tool for font-lock keywords]]

**** [[id:e54a2697-8b4a-4b65-a971-f79e0fa22120][font-lock-regression-suite: Regression test suite for font-lock keywords of Emacs standard modes]]

**** [[id:fb9315d1-111d-4eab-8f99-00710e39b04c][font-lock-studio: Debugger for Font Lock keywords]]

**** [[id:85a2421d-6fbd-4c4d-a6f9-587258c8f625][highlight-refontification: Visualize how font-lock refontifies a buffer]]

**** [[id:5b4a9320-1d3d-441b-8505-7b35a8d323d3][lisp-extra-font-lock: Highlight bound variables and quoted expressions in lisp]]

**** [[id:267c8c25-53db-4ced-9242-176094e101e3][multicolumn: Multiple side-by-side windows support]]

** Artur Malabarba
:PROPERTIES:
:ID:       53c0b780-7d67-47a5-ad30-090526e2018f
:END:

Another prolific Emacs contributor, package developer, and blogger.

+  [[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][Blog: /Endless Parentheses/]]
+  [[https://github.com/Malabarba][GitHub]]


*** Packages
:PROPERTIES:
:ID:       ae5465ac-9fda-4c1a-9900-4fd1eeb173da
:END:

**** [[id:4dc7c607-a116-4c39-b063-fe34bd20cccf][aggressive-indent-mode]]

**** [[id:2c31eae6-eeba-433f-bc26-9465d5aa8537][paradox]]

** Damien Cassou

+  [[https://github.com/DamienCassou][GitHub]]

*** Packages

**** [[id:a32ed391-8ce6-46b7-9367-8117829ce2e7][beginend.el]]

** John Wiegley

John is the current Emacs maintainer.

+  [[http://newartisans.com/][Blog]]
+  [[https://github.com/jwiegley][GitHub]]

*** Packages

**** [[id:540617fd-d4ff-47df-89da-6c48c8f27785][use-package]]

** Jonas Bernoulli

Jonas is a prolific Emacs package developer and maintainer.  You could spend hours on his GitHub repo.

+ [[https://github.com/tarsius][GitHub]]

*** Packages

**** [[id:43daf455-caeb-4399-b1bb-15a10603018b][Magit]]

** Jorgen Schäfer

*** Packages                                                     :packages:

**** [[id:108f5eb6-7307-4d4b-aaf1-dd2a8bb65a58][buttercup: Behavior-Driven Emacs Lisp Testing]]

**** [[https://github.com/jorgenschaefer/circe][Circe, a Client for IRC in Emacs]]

**** [[https://github.com/jorgenschaefer/elpy][elpy: Emacs Python Development Environment]]

**** [[https://github.com/jorgenschaefer/pyvenv][pyvenv: Python virtual environment interface]]

** Magnar Sveen

+  [[https://github.com/magnars][GitHub]]


*** Packages

**** [[id:e85e4252-ea03-4473-b52f-9393e7527fad][dash.el]]

**** [[id:88b496f4-8230-474e-b2ee-d8e4e8ca30d0][expand-region.el]]

**** [[id:deefcbc5-0c37-4936-a820-df99ae31a401][multiple-cursors.el]]

**** [[*%5B%5Bhttps://github.com/magnars/s.el%5D%5Bs.el:%20The%20long%20lost%20Emacs%20string%20manipulation%20library%5D%5D][s.el]]

** Matus Goljer

+ [[https://github.com/Fuco1/][GitHub]]


*** Packages

**** [[*%5B%5Bhttps://github.com/magnars/dash.el%5D%5Bdash.el%5D%5D][dash.el]]
:PROPERTIES:
:ID:       827c9455-2747-4514-8d71-4558eff5a263
:END:

**** [[id:e806d7f3-43e9-4260-aae4-479efbd41653][smartparens]]

** Oleh Krehel
:PROPERTIES:
:ID:       a8a8dd9f-4113-4d4c-9882-ac59a4e86c0e
:END:

Oleh is a prolific package author, having contributed many very high-quality packages.  He also writes at [[id:b6e88f95-8c4f-4d18-a7df-de0820d76291][his blog]].

*** Packages                                                     :packages:

**** [[https://github.com/abo-abo/ace-window][ace-window: Quickly switch windows]]       :navigation:windows:buffers:

**** [[https://github.com/abo-abo/avy][avy: Jump to things tree-style]]                           :navigation:

**** [[https://github.com/abo-abo/hydra][hydra: make bindings that stick around]]                  :key_binding:

**** [[id:ca3809ba-5900-4dfd-84a1-1ceecc048296][lispy: short and sweet LISP editing]]

**** [[https://github.com/abo-abo/swiper][swiper: Ivy - a generic completion frontend, Swiper - isearch with an overview, and more. Oh, man!]] :navigation:

** Phil Lord

+ [[https://github.com/phillord][GitHub]]

*** Packages

**** [[id:0c220bc9-7173-4b0f-8955-e10ab6db640f][lentic: Create views of the same content in two buffers]]

**** [[id:6858c112-9756-43b4-a2e3-fa00a71e9367][m-buffer-el]]

** Sacha Chua
:PROPERTIES:
:ID:       12c7b803-9af2-4010-bca4-06304fbb69c7
:END:

Sacha could easily be nominated the official Emacs ambassador, were there to be one.  Her contributions to the Emacs and Org-mode communities are innumerable.  One of her greatest recent contributions is her weekly [[http://sachachua.com/blog/category/geek/emacs/emacs-news/][Emacs news]] posts that serve as a digest of everything that happened in the Emacs world over the past week.

+  [[http://sachachua.com/blog/][Blog: /Living an Awesome Life/]]
+  [[http://github.com/sachac/][GitHub]]

** Wilfred Hughes

Wilfred has published several useful packages, and he's also leading the [[https://github.com/Wilfred/remacs][Rust Emacs port]].

*** Packages

**** [[id:d329f03e-ed1e-4205-a232-6eee16717795][emacs-refactor]]

**** [[id:22b35972-c32f-467a-92ee-f8a155920756][ht.el]]

**** [[id:57ecc064-7291-4cc5-a545-958e2bca295b][suggest.el]]
:PROPERTIES:
:ID:       80aa6c33-72d6-4792-8f41-e8ac4f7a1b0d
:END:
* Contributions

Yes, please!  Please send pull requests and file issues on the [[https://github.com/alphapapa/emacs-package-dev-handbook][GitHub repo]].  This is intended to be a community project.

* Tasks
:PROPERTIES:
:TOC:      ignore-children
:END:

** TODO Articles to add [0/13]

*** TODO [[https://www.lunaryorn.com/posts/read-and-write-files-in-emacs-lisp][Read and write files in Emacs Lisp]] (5 min read)

*** TODO [[https://www.lunaryorn.com/posts/a-future-for-concurrency-in-emacs-lisp][A Future For Concurrency In Emacs Lisp]] (6 min read)

*** TODO [[https://www.lunaryorn.com/posts/a-blast-from-the-past-the-tale-of-concurrency-in-emacs][A Blast From The Past: The Tale Of Concurrency In Emacs]] (7 min read)

*** TODO [[https://www.lunaryorn.com/posts/I-wished-gnu-emacs-had][I wished GNU Emacs had…]] (2 min read)

*** TODO [[https://www.lunaryorn.com/posts/reproduce-bugs-in-emacs-Q][Reproduce bugs in emacs -Q]] (4 min read)

*** TODO [[https://www.lunaryorn.com/posts/use-package-el-really][Why package.el?]] (1 min read)

*** TODO [[https://www.lunaryorn.com/posts/my-emacs-configuration-with-use-package][My Emacs Configuration with use-package]] (8 min read)

*** TODO [[https://www.lunaryorn.com/posts/emacs-script-pitfalls][Emacs script pitfalls]] (13 min read)

*** TODO [[https://www.lunaryorn.com/posts/autoloads-in-emacs-lisp][Autoloads in Emacs Lisp]] (5 min read)

*** TODO [[https://www.lunaryorn.com/posts/advanced-syntactic-fontification][Advanced syntactic fontification]] (11 min read)

*** TODO [[https://www.lunaryorn.com/posts/calling-python-from-haskell][Calling Python from Haskell]] (12 min read)

*** TODO [[https://www.lunaryorn.com/posts/search-based-fontification-with-keywords][Search-based fontification with keywords]] (18 min read)

*** TODO [[https://www.lunaryorn.com/posts/syntactic-fontification-in-emacs][Syntactic fontification in Emacs]] (10 min read)

** TODO Add [[https://github.com/bbatsov/emacs-lisp-style-guide][GitHub - bbatsov/emacs-lisp-style-guide: A community-driven Emacs Lisp style guide]]

** TODO Add [[http://nic.ferrier.me.uk/][Nic Ferrier]]

*** TODO [[https://github.com/nicferrier/emacs-noflet][GitHub - nicferrier/emacs-noflet: noflet - nic's overriding flet, for fleting functions for the purpose of decorating them]]
** TODO Add [[https://github.com/wasamasa?][Vasilij Schneidermann]]

** TODO [[https://github.com/VincentToups/emacs-utils][Vincent Toups' projects]]

He has a lot of interesting libraries on his repo, and some of them are /extensively/ documented.  An aspiring Emacs Lisp developer could learn a lot from his code.

** TODO Add MELPA

Mention @milkypostman, @purcell, @syohex, etc. Mention sandbox.

** Testing

*** TODO Everything at [[https://www.emacswiki.org/emacs/UnitTesting][EmacsWiki: Unit Testing]]

*** TODO [[https://github.com/rejeep/el-mock.el][GitHub - rejeep/el-mock.el: Mocking library for Emacs]]

*** TODO [[https://github.com/sigma/mocker.el][GitHub - sigma/mocker.el: a simple mocking framework for Emacs]]

*** TODO [[https://www.emacswiki.org/emacs/EmacsLispExpectations][EmacsWiki: Emacs Lisp Expectations]]

** TODO Add databases section

*** TODO [[https://github.com/skeeto/emacsql][GitHub - skeeto/emacsql: A high-level Emacs Lisp RDBMS front-end]]

*** TODO [[https://github.com/pekingduck/emacs-sqlite3-api][GitHub - pekingduck/emacs-sqlite3-api: Native SQLite3 API for GNU Emacs]]
:PROPERTIES:
:ID:       caeb4340-1f2e-4c84-a604-80594b465a10
:END:

** TODO Tree-traversal

*** [[https://github.com/volrath/treepy.el][GitHub - volrath/treepy.el: Generic tree traversing tools for Emacs Lisp]]
:LOGBOOK:
-  State "TODO"       from              [2017-09-06 Wed 00:21]
:END:
* Code
:PROPERTIES:
:TOC:      0
:END:

This section contains code used to add to and update this document.

** UNDERWAY Automate adding new links and summaries
:LOGBOOK:
-  State "UNDERWAY"   from "TODO"       [2017-08-03 Thu 15:12]
:END:

*** TODO Get summary of page

*** DONE Get archive.is link for page
CLOSED: [2017-08-03 Thu 15:11]
:PROPERTIES:
:ID:       a0e9486f-24f0-47a6-8f21-50bcc7ac2ca0
:END:
:LOGBOOK:
-  State "DONE"       from "TODO"       [2017-08-03 Thu 15:11]
:END:

This bookmarklet should provide a way to get the URL:

#+BEGIN_SRC javascript
  javascript:void(open('https://archive.today/?run=1&url='+encodeURIComponent(document.location)))
#+END_SRC

Seems to only work if run in a browser, with JavaScript.  But there's a [[https://github.com/pastpages/archiveis][Python package]] that has a shell command.  So:

#+BEGIN_SRC elisp :results silent
  (require 's)

  (defun emacs-package-dev-handbook--archiveis-capture (url)
    "Return archive.is archived URL for URL."
    (with-temp-buffer
      (when (zerop (call-process "archiveis" nil t nil url))
        (s-trim (buffer-string)))))

  (cl-defun emacs-package-dev-handbook-insert-archiveis-property (&optional url)
    "Set the \"archive.is\" property for entry at point to the archived URL.
   Assumes heading on/before point is an Org link to a web page. If
   URL is given, archive that URL instead."
    (interactive)
    (when-let ((url (or url (save-excursion
                              (unless (org-at-heading-p)
                                (org-back-to-heading))
                              (beginning-of-line)
                              (when (re-search-forward org-bracket-link-regexp (line-end-position) 'noerror)
                                (org-link-unescape (match-string-no-properties 1))))))
               (archive-url (emacs-package-dev-handbook--archiveis-capture url)))
      (org-set-property "archive.is" archive-url)))
#+END_SRC

*** TODO Insert new entry at point

Maybe use capture templates and refile?

** Table of Contents

Currently using [[https://github.com/alphapapa/org-make-toc][org-make-toc]], which is uploaded but unfinished and unpackaged.

** Config

I love Emacs and Org mode.  This makes it so easy to make the document...alive!  And automated!  Beautiful.

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: (lambda nil (org-make-toc-make-toc))
# after-save-hook: (lambda nil (when (org-html-export-to-html) (rename-file "README.html" "index.html" t)))
# org-export-with-properties: ()
# org-export-with-title: t
# End:
