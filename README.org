#+TITLE: The Emacs Package Developer's Handbook
#+OPTIONS: broken-links:t num:4
#+TAGS: Emacs
#+SETUPFILE: export/setup/theme-bigblow-local.setup

#+HTML: <a href=https://alphapapa.github.io/dont-tread-on-emacs/><img src="dont-tread-on-emacs-150.png" align="right"></a>

After developing some little Emacs packages for a year or so, I began to notice how I'd forget little things that I learned, and then I'd have to go hunting for that information again.  I also noticed how there are some issues for which there doesn't seem to be a "best practice" or "Standard Operating Procedure" to refer to.

So this is intended to be a place to collect and organize information related to Emacs package development.  Built with Emacs, by Emacs package developers, for Emacs package developers.

You can read this Org file directly on the [[https://github.com/alphapapa/emacs-package-dev-handbook][repository]], or you can read the [[https://alphapapa.github.io/emacs-package-dev-handbook/][HTML version]].

*Note:* The primary sections are listed at the top of the page in the horizontal bar.

* Contents                                                         :noexport:
  - [[#emacs-lisp][Emacs Lisp]]
   - [[#buffers][Buffers]]
   - [[#checkerslinters][Checkers/linters]]
   - [[#editing][Editing]]
   - [[#general][General]]
   - [[#packaging][Packaging]]
   - [[#pattern-matching][Pattern matching]]
   - [[#string-manipulation][String manipulation]]
   - [[#testing][Testing]]
   - [[#version-control][Version control]]
  - [[#blogs][Blogs]]
  - [[#people][People]]
  - [[#contributions][Contributions]]
  - [[#code][Code]]
* Emacs Lisp                                                          :elisp:
:PROPERTIES:
:TOC:      2
:END:

** Buffers                                                         :buffers:

*** Libraries                                                   :libraries:
:PROPERTIES:
:ID:       523aa766-36a3-4827-a114-6babf72edc6b
:END:

**** [[https://github.com/phillord/m-buffer-el][m-buffer-el: List Oriented Buffer Operations]]
:PROPERTIES:
:ID:       6858c112-9756-43b4-a2e3-fa00a71e9367
:END:

** Checkers/linters                                       :linters:checkers:

*** TODO Flycheck-package

** Editing                                                         :editing:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Tools                                                           :tools:

**** [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode: minor mode that keeps your code always indented]] :formatting:indentation:parentheses:
:PROPERTIES:
:ID:       4dc7c607-a116-4c39-b063-fe34bd20cccf
:END:

**** [[https://emacs.cafe/emacs/package/2017/08/01/beginend.html][beginend.el]] :navigation:
:PROPERTIES:
:ID:       a32ed391-8ce6-46b7-9367-8117829ce2e7
:END:

This package, by Damien Cassou and Matus Goljer, helps navigation by redefining the ~M-<~ and ~M->~ keys do, depending on the major-mode.
**** [[https://github.com/magnars/expand-region.el][expand-region.el: Increase selected region by semantic units]] :selection:region:
:PROPERTIES:
:ID:       88b496f4-8230-474e-b2ee-d8e4e8ca30d0
:END:

**** [[https://github.com/IvanMalison/multi-line][multi-line: multi-line everything from function invocations and definitions to array and map literals in a wide variety of languages]] :formatting:

**** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors.el: Multiple cursors]]             :selection:editing:
:PROPERTIES:
:ID:       deefcbc5-0c37-4936-a820-df99ae31a401
:END:

**** [[https://github.com/Fuco1/smartparens][smartparens: Minor mode  that deals with parens pairs and tries to be smart about it]] :navigation:editing:parentheses:
:PROPERTIES:
:ID:       e806d7f3-43e9-4260-aae4-479efbd41653
:END:

** General                                                         :general:

*** Libraries                                                   :libraries:

**** [[https://www.gnu.org/software/emacs/manual/html_node/cl/index.html][Common Lisp Extensions]] (=cl-lib=)

This is the built-in =cl-lib= package which implements Common Lisp functions and control structures for Emacs Lisp.

**** [[https://github.com/magnars/dash.el][dash.el]]                                                        :dash:
:PROPERTIES:
:ID:       e85e4252-ea03-4473-b52f-9393e7527fad
:END:

Dash is a powerful general-purpose library that provides many useful functions and macros.

**** [[https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el][subr-x]]                                :built_in:strings:flow_control:

#+BEGIN_QUOTE
Less commonly used functions that complement basic APIs, often implemented in C code (like hash-tables and strings), and are not eligible for inclusion in subr.el.
#+END_QUOTE

This is a built-in package that provides several useful functions and macros, such as =thread-first= / =last=, =if-let= / =when-let=, hash-table functions, and string functions.  It's easy to forget about this, since:

#+BEGIN_QUOTE
Do not document these functions in the lispref.  http://lists.gnu.org/archive/html/emacs-devel/2014-01/msg01006.html
#+END_QUOTE


*** Tools                                                           :tools:

**** [[https://github.com/phillord/lentic][lentic: Create views of the same content in two buffers]]
:PROPERTIES:
:ID:       0c220bc9-7173-4b0f-8955-e10ab6db640f
:END:
** Packaging                                                     :packaging:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Best practices                                         :best_practices:

**** Autoloads                                                 :autoloads:

***** TODO Autoloading macro-generated functions

This may actually be a bug, or at least an unanswered question.

[[https://www.reddit.com/r/emacs/comments/63u5yn/how_to_use_autoload_cookies_for_custom_defunlike/][How to use autoload cookies for custom defun-like macros? : emacs]]:

#+BEGIN_QUOTE
Say I have a macro =deffoo= that expands to some custom kind of =defun=, and I want to use an autoload cookie to autoload the result. According to the manual,

#+BEGIN_EXAMPLE
    ;;;###autoload (deffoo bar   ...)
#+END_EXAMPLE

copies the entire form to =autoloads.el=, and something like

#+BEGIN_EXAMPLE
    ;;;###autoload (autoload 'bar "this-file") (deffoo bar   ...)
#+END_EXAMPLE

should be used instead. What confuses me is [[http://stackoverflow.com/a/38805102][this StackOverflow comment]] by who appears to be Stefan Monnier, saying that Emacs /should/ expand the macro before generating the autoload, and that it's probably a bug when this does not happen.

Can anyone clear up what the intended behaviour is?
#+END_QUOTE

*** Tools                                                           :tools:

**** Package installation/management             :installation:management:

***** [[https://github.com/Malabarba/paradox][paradox: modernizing Emacs' Package Menu. With package ratings, usage statistics, customizability, and more.]]
:PROPERTIES:
:ID:       2c31eae6-eeba-433f-bc26-9465d5aa8537
:END:
***** [[https://github.com/raxod502/straight.el][straight.el: Next-generation, purely functional package manager for the Emacs hacker]]

***** [[https://github.com/jwiegley/use-package][use-package: A use-package declaration for simplifying your .emacs]]
:PROPERTIES:
:ID:       540617fd-d4ff-47df-89da-6c48c8f27785
:END:

Developed by the current maintainer of Emacs, himself, John Wiegley.

** Pattern matching                         :destructuring:pattern_matching:
:PROPERTIES:
:TOC:      ignore-children
:END:

*** Articles                                                     :articles:

**** [[http://www.wilfred.me.uk/blog/2017/03/19/pattern-matching-in-emacs-lisp/][Pattern Matching in Emacs Lisp â€“ Wilfred Hughes::Blog]] :pcase:shadchen:cl:dash:
:PROPERTIES:
:archive.is: http://archive.is/J4DqY
:END:

#+BEGIN_QUOTE
Pattern matching is invaluable in elisp. Lists are ubiquitous, and a small amount of pattern matching can often replace a ton of verbose list fiddling.

Since this is Lisp, we have lots of choices! In this post, we'll compare [[https://www.gnu.org/software/emacs/manual/cl.html][cl.el]], [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase.el]], [[https://github.com/magnars/dash.el][dash.el]], and [[https://github.com/VincentToups/shadchen-el][shadchen]], so you can choose the best fit for your project. We'll look at the most common use cases, and end with some recommendations.

For the sake of this post, we'll consider both pattern matching and destructuring, as they're closely related concepts.
#+END_QUOTE

*** Libraries                                                   :libraries:

**** [[https://github.com/magnars/dash.el][dash.el]] :dash:

Dash is a powerful library, and one of its features is powerful destructuring with its ~-let~ macro, and several others that work the same way.

**** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Pattern-matching-case-statement.html][pcase]]                                                :built_in:pcase:

~pcase~ is built-in to Emacs.  Its syntax can be confusing, but it is very powerful.

***** Articles                                                 :articles:

****** [[http://newartisans.com/2016/01/pattern-matching-with-pcase/][Emacs: Pattern Matching with pcase - Lost in Technopolis]]
:PROPERTIES:
:archive.is: http://archive.is/FAzd8
:END:

**** [[https://github.com/VincentToups/shadchen-el][shadchen-el]]                                             :shadchen:el:

A powerful, Racket-style pattern-matching library.

*** Tools                                                           :tools:

**** let-alist                                             :alists:macros:

#+BEGIN_QUOTE
let-alist is the best thing to happen to associative lists since the invention of the cons cell. This little macro lets you easily access the contents of an alist, concisely and efficiently, without having to specify them preemptively. It comes built-in with 25.1, and is also available on GNU Elpa for older Emacsen.
#+END_QUOTE

[[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][Example]]:

#+BEGIN_SRC elisp
  (defun sx-question-list--print-info (question-data)
    "DOC"
    (let-alist question-data
      (list
       question-data
       (vector
        (int-to-string .score)
        (int-to-string .answer_count)
        .title " "
        .owner.display_name
        .last_activity_date sx-question-list-ago-string
        " " .tags))))
#+END_SRC

***** Articles                                                 :articles:

****** [[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][New on Elpa and in Emacs 25.1: let-alist Â· Endless Parentheses]]
:PROPERTIES:
:archive.is: http://archive.is/2wNFm
:END:

Here Artur introduces the macro and gives examples.

** String manipulation                                             :strings:

*** Libraries                                                   :libraries:

**** [[https://github.com/magnars/s.el][s.el: The long lost Emacs string manipulation library]]

** Testing                                                         :testing:

*** Libraries                                                   :libraries:

**** [[https://github.com/phillord/assess][assess: Test support functions]]

**** [[https://github.com/ecukes/ecukes][ecukes: Cucumber for Emacs]]

**** [[https://www.gnu.org/software/emacs/manual/html_node/ert/][Emacs Lisp Regression Testing]] (ERT)                        :built_in:

This is the standard, built-in Emacs testing library, used by core code and third-party packages alike.

*** Tools                                                    :tools:

**** bench macro                                                  :macros:

From Phil Lord's [[http://phillord.github.io/m-buffer-el/#sec-5-1-2][m-buffer-el]]:

#+BEGIN_SRC elisp
  (defmacro bench (&rest body)
    (declare (indent defun))
    `(format "%e"
             (car
              (benchmark-run-compiled
                  1000000
                (progn
                  ,@body)))))

  ;; Use like this:
  (bench
    (current-buffer)
    (point))
#+END_SRC

**** elp-profile macro                                            :macros:

Call this macro from an Org source block and you'll get a results block showing which 20 functions were called the most times, how long they took to run, etc.  Set =prefixes= to a list of strings matching the prefixes of the functions you want to instrument.

#+BEGIN_SRC elisp
  (defmacro elp-profile (times &rest body)
    (declare (indent defun))
    `(let ((prefixes '("string-" "s-" "buffer-" "append" "delq" "map"
                       "list" "car" "save-" "outline-" "delete-dups"
                       "sort" "line-" "nth" "concat" "char-to-string"
                       "rx-" "goto-" "when" "search-" "re-"))
           output)
       (dolist (prefix prefixes)
         (elp-instrument-package prefix))
       (dotimes (x ,times)
         ,@body)
       (elp-results)
       (elp-restore-all)
       (point-min)
       (forward-line 20)
       (delete-region (point) (point-max))
       (setq output (buffer-substring-no-properties (point-min) (point-max)))
       (kill-buffer)
       (delete-window)
       output))

  ;; Use like this:
  (elp-profile 10
    (goto-char (point-min))
    (search-forward "something"))
#+END_SRC

** Version control                                         :version_control:

*** Packages                                                     :packages:

**** [[https://github.com/magit/magit][Magit]]                                                           :git:
:PROPERTIES:
:ID:       43daf455-caeb-4399-b1bb-15a10603018b
:END:

One of the "killer apps" for Emacs--and for git!
* Blogs                                                               :blogs:
:PROPERTIES:
:TOC:      0
:END:

** [[http://planet.emacsen.org/][Planet Emacsen]]

This is the main community aggregator.  You can find just about everyone's Emacs-related blog posts here.

** Sacha Chua's [[http://sachachua.com/blog/category/geek/emacs/emacs-news/][/Emacs News/]]

This is Sacha's weekly Emacs news digest.  Don't miss it!

** [[id:53c0b780-7d67-47a5-ad30-090526e2018f][Artur Malabarba's /Endless Parentheses/]]

** [[id:12c7b803-9af2-4010-bca4-06304fbb69c7][Sacha Chua's /Living an Awesome Life/]]

* People                                                             :people:
:PROPERTIES:
:TOC: ignore-children
:END:

The Emacs community is so full of brilliant, generous people that I can't keep track of them all!  I will surely miss many, and I will add them in no particular order, but merely as I come across them again and again.

** Artur Malabarba
:PROPERTIES:
:ID:       53c0b780-7d67-47a5-ad30-090526e2018f
:END:

Another prolific Emacs contributor, package developer, and blogger.

+  [[http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html][Blog: /Endless Parentheses/]]
+  [[https://github.com/Malabarba][GitHub]]


*** Packages
:PROPERTIES:
:ID:       ae5465ac-9fda-4c1a-9900-4fd1eeb173da
:END:

**** [[id:4dc7c607-a116-4c39-b063-fe34bd20cccf][aggressive-indent-mode]]

**** [[id:2c31eae6-eeba-433f-bc26-9465d5aa8537][paradox]]
** Damien Cassou

+  [[https://github.com/DamienCassou][GitHub]]

*** Packages

**** [[id:a32ed391-8ce6-46b7-9367-8117829ce2e7][beginend.el]]

** John Wiegley

John is the current Emacs maintainer.

+  [[http://newartisans.com/][Blog]]
+  [[https://github.com/jwiegley][GitHub]]

*** Packages

**** [[id:540617fd-d4ff-47df-89da-6c48c8f27785][use-package]]

** Jonas Bernoulli

Jonas is a prolific Emacs package developer and maintainer.  You could spend hours on his GitHub repo.

+ [[https://github.com/tarsius][GitHub]]

*** Packages

**** [[id:43daf455-caeb-4399-b1bb-15a10603018b][Magit]]

** Magnar Sveen

+  [[https://github.com/magnars][GitHub]]


*** Packages

**** [[id:e85e4252-ea03-4473-b52f-9393e7527fad][dash.el]]

**** [[id:88b496f4-8230-474e-b2ee-d8e4e8ca30d0][expand-region.el]]
**** [[id:deefcbc5-0c37-4936-a820-df99ae31a401][multiple-cursors.el]]
**** [[*%5B%5Bhttps://github.com/magnars/s.el%5D%5Bs.el:%20The%20long%20lost%20Emacs%20string%20manipulation%20library%5D%5D][s.el]]

** Matus Goljer

+ [[https://github.com/Fuco1/][GitHub]]


*** Packages

**** [[*%5B%5Bhttps://github.com/magnars/dash.el%5D%5Bdash.el%5D%5D][dash.el]]
:PROPERTIES:
:ID:       827c9455-2747-4514-8d71-4558eff5a263
:END:

**** [[id:e806d7f3-43e9-4260-aae4-479efbd41653][smartparens]]

** Phil Lord

+ [[https://github.com/phillord][GitHub]]

*** Packages

**** [[id:0c220bc9-7173-4b0f-8955-e10ab6db640f][lentic: Create views of the same content in two buffers]]

**** [[id:6858c112-9756-43b4-a2e3-fa00a71e9367][m-buffer-el]]

** Sacha Chua
:PROPERTIES:
:ID:       12c7b803-9af2-4010-bca4-06304fbb69c7
:END:

Sacha could easily be nominated the official Emacs ambassador, were there to be one.  Her contributions to the Emacs and Org-mode communities are innumerable.  One of her greatest recent contributions is her weekly [[http://sachachua.com/blog/category/geek/emacs/emacs-news/][Emacs news]] posts that serve as a digest of everything that happened in the Emacs world over the past week.

+  [[http://sachachua.com/blog/][Blog: /Living an Awesome Life/]]
+  [[http://github.com/sachac/][GitHub]]

* Contributions

Yes, please!  Please send pull requests and file issues on the [[https://github.com/alphapapa/emacs-package-dev-handbook][GitHub repo]].  This is intended to be a community project.

* Code
:PROPERTIES:
:TOC:      0
:END:

This section contains code used to add to and update this document.

** UNDERWAY Automate adding new links and summaries
:LOGBOOK:
-  State "UNDERWAY"   from "TODO"       [2017-08-03 Thu 15:12]
:END:

*** TODO Get summary of page

*** DONE Get archive.is link for page
CLOSED: [2017-08-03 Thu 15:11]
:PROPERTIES:
:ID:       a0e9486f-24f0-47a6-8f21-50bcc7ac2ca0
:END:
:LOGBOOK:
-  State "DONE"       from "TODO"       [2017-08-03 Thu 15:11]
:END:

This bookmarklet should provide a way to get the URL:

#+BEGIN_SRC javascript
  javascript:void(open('https://archive.today/?run=1&url='+encodeURIComponent(document.location)))
#+END_SRC

Seems to only work if run in a browser, with JavaScript.  But there's a [[https://github.com/pastpages/archiveis][Python package]] that has a shell command.  So:

#+BEGIN_SRC elisp :results silent
  (require 's)

  (defun emacs-package-dev-handbook--archiveis-capture (url)
    "Return archive.is archived URL for URL."
    (with-temp-buffer
      (when (zerop (call-process "archiveis" nil t nil url))
        (s-trim (buffer-string)))))

  (cl-defun emacs-package-dev-handbook-insert-archiveis-property (&optional url)
    "Set the \"archive.is\" property for entry at point to the archived URL.
  Assumes heading on/before point is an Org link to a web page.  If
  URL is given, archive that URL instead."
    (interactive)
    (when-let ((url (or url (save-excursion
                              (unless (org-at-heading-p)
                                (org-back-to-heading))
                              (when (re-search-forward org-bracket-link-regexp (line-end-position) 'noerror)
                                (org-link-unescape (match-string-no-properties 1))))))
               (archive-url (emacs-package-dev-handbook--archiveis-capture url)))
      (org-set-property "archive.is" archive-url)))
#+END_SRC

*** TODO Insert new entry at point

Maybe use capture templates and refile?

** Table of Contents

Currently using [[https://github.com/alphapapa/org-make-toc][org-make-toc]], which is uploaded but unfinished and unpackaged.

** Config

I love Emacs and Org mode.  This makes it so easy to make the document...alive!  And automated!  Beautiful.

# Local Variables:
# eval: (require 'org-make-toc)
# before-save-hook: (lambda nil (org-make-toc-make-toc))
# after-save-hook: (lambda nil (when (org-html-export-to-html) (rename-file "README.html" "index.html" t)))
# org-export-with-properties: ()
# org-export-with-title: t
# End:
